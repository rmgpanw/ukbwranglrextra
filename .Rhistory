# Theme: remove background, legend, grid and panel borders
ggplot2::theme_bw() +
ggplot2::theme(
legend.position = "none",
panel.border = ggplot2::element_blank(),
panel.grid.major = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank()
)+
# Reduce space between plot area and x axis
ggplot2::scale_y_continuous(expand = c(0, 0.5)) +
# axis labels
ggplot2::labs(x = xlab,
y = ylab)
#' @param df A data frame.
#' @param chr Name of chromosome column. Should be type character or factor.
#' @param log10_p Name of -log10(p value) column. Should be on -log10 scale.
#' @param text Name of column with text annotation.
#' @param order_idx Name of column with order to arrange SNPs.
#'   Should be type integer.
#' @param geom_point_args A named list of arguments to be passed to
#'   [ggplot2::geom_point()].
#'
#' @return A ggplot plot object
plot_manhattan_basic <- function(df,
chr = "CHR",
log10_p = "P",
text = "SNP",
order_idx = "ORDER_IDX",
geom_point_args = list(alpha = 1,
size = 2),
labs_args = list(x = "Chromosome",
y = "-log10(p value)")) {
# validate args
assertthat::assert_that(all(1:nrow(df) == sort(df[[order_idx]])),
msg = "Numbers in `order_idx` column should include all values between 1 and `nrow(df)`")
# prepare x axis for plotting
x_axis_df <- df %>%
dplyr::group_by(.data[[chr]]) %>%
dplyr::summarize("center" = (max(.data[[order_idx]]) + min(.data[[order_idx]])) / 2)
# plot
ggplot2::ggplot(df, ggplot2::aes(
x = .data[[order_idx]],
y = .data[[log10_p]]
)) +
# Show all points
ggplot2::geom_point(ggplot2::aes(colour = .data[[chr]]),
size = geom_point_args$size,
alpha = geom_point_args$alpha) +
# Label X axis. Labels positioned at centre of each chromosome
ggplot2::scale_x_continuous(label = x_axis_df[[chr]],
breaks = x_axis_df[["center"]]) +
# Theme: remove background, legend, grid and panel borders
ggplot2::theme_bw() +
ggplot2::theme(
legend.position = "none",
panel.border = ggplot2::element_blank(),
panel.grid.major = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank()
)+
# Reduce space between plot area and x axis
ggplot2::scale_y_continuous(expand = c(0, 0.5)) +
# axis labels
ggplot2::labs(x = labs_args$x,
y = labs_args$y)
}
# colour
col_manual <- c("red", "green")
# prepare dummy data for basic Manhattan plot
dummy_manhattan_df(type = "phewas") %>%
arrange(CHR,
P) %>%
mutate("ORDER_IDX" = 1:n()) %>%
mutate(P = -log10(P)) %>%
mutate(CHR = as.character(CHR)) %>%
plot_manhattan_basic()
# prepare dummy data for basic Manhattan plot
dummy_manhattan_df(type = "phewas") %>%
arrange(CHR,
P) %>%
mutate("ORDER_IDX" = 1:n()) %>%
mutate(P = -log10(P)) %>%
mutate(CHR = as.character(CHR)) %>%
plot_manhattan_basic() +
theme(axis.text.x = element_text(angle = 45))
# prepare dummy data for basic Manhattan plot
dummy_manhattan_df(type = "phewas") %>%
arrange(CHR,
P) %>%
mutate("ORDER_IDX" = 1:n()) %>%
mutate(P = -log10(P)) %>%
mutate(CHR = as.character(CHR)) %>%
plot_manhattan_basic() +
theme(axis.text.x = element_text(angle = 135))
# prepare dummy data for basic Manhattan plot
dummy_manhattan_df(type = "phewas") %>%
arrange(CHR,
P) %>%
mutate("ORDER_IDX" = 1:n()) %>%
mutate(P = -log10(P)) %>%
mutate(CHR = as.character(CHR)) %>%
plot_manhattan_basic() +
theme(axis.text.x = element_text(angle = 325))
# prepare dummy data for basic Manhattan plot
dummy_manhattan_df(type = "phewas") %>%
arrange(CHR,
P) %>%
mutate("ORDER_IDX" = 1:n()) %>%
mutate(P = -log10(P)) %>%
mutate(CHR = as.character(CHR)) %>%
plot_manhattan_basic() +
theme(axis.text.x = element_text(angle = 325, hjust=0, vjust=1))
# prepare dummy data for basic Manhattan plot
dummy_manhattan_df(type = "phewas") %>%
arrange(CHR,
P) %>%
mutate("ORDER_IDX" = 1:n()) %>%
mutate(P = -log10(P)) %>%
mutate(CHR = as.character(CHR)) %>%
plot_manhattan_basic() +
theme(axis.text.x = element_text(angle = 325, hjust=0, vjust=0))
split(dummy_manhattan_df(), dummy_manhattan_df()$P < 0.05)
hm <- split(dummy_manhattan_df(), dummy_manhattan_df()$P < 0.05)
hm$TRUE
hm$`TRUE`
hm[["TRUE"]]
hm[["TRUE"]] <- slice_sample(hm[["TRUE"]], prop = 0.2)
hm[["TRUE"]]
5e-08
5e-01
5e-02
?slice_sample
iris %>% slice_sample(n = 1)
iris %>% slice_sample(n = 1)
iris %>% slice_sample(n = NULL)
iris %>% slice_sample(n = NULL, prop = 0.2)
#' @param df A data frame.
#' @param pval_col Name of column in `df` containing p values.
#' @param sig Significant threshold.
#' @inheritParams dplyr::slice_sample
#'
#' @return A data frame.
#' @export
#'
#' @examples
#'
sample_nonsig_results <- function(df,
pval_col = "P",
sig = 5e-08,
prop = 0.2,
n = NULL) {
# validate
if (!is.null(n) & !is.null(prop)) {
stop("Supply only one of `n` and `prop` arguments")
}
# split into significant and non-significant dfs
df_split <- split(df,
df[[pval_col]] >= sig)
# sample non-significant results
if (!is.null(prop)) {
df_split[["TRUE"]] <-
dplyr::slice_sample(df_split[["TRUE"]], prop = prop, replace = FALSE)
} else if (!is.null(n)) {
df_split[["TRUE"]] <-
dplyr::slice_sample(df_split[["TRUE"]], prop = prop, replace = FALSE)
}
# return result
dplyr::bind_rows(df_split)
}
head(iris)
count(iris, Petal.Width)
iris %>% sample_nonsig_results(pval_col = "Petal.Width", n = 2)
#' @param pval_col Name of column in `df` containing p values.
#' @param sig Significance threshold. P values equal to or greater than this
#'   will be sampled.
#' @inheritParams dplyr::slice_sample
#'
#' @return A data frame.
#' @export
#'
#' @examples
#'
sample_nonsig_results <- function(df,
pval_col = "P",
sig = 5e-08,
n,
prop) {
# validate
if (!rlang::is_missing(n) & !rlang::is_missing(prop)) {
stop("Supply exactly only one of `n` and `prop` arguments")
}
# split into significant and non-significant dfs
df_split <- split(df,
df[[pval_col]] >= sig)
# sample non-significant results
if (!rlang::is_missing(prop)) {
df_split[["TRUE"]] <-
dplyr::slice_sample(df_split[["TRUE"]], prop = prop, replace = FALSE)
} else if (!rlang::is_missing(n)) {
df_split[["TRUE"]] <-
dplyr::slice_sample(df_split[["TRUE"]], prop = prop, replace = FALSE)
}
# return result
dplyr::bind_rows(df_split)
}
iris %>% sample_nonsig_results(pval_col = "Petal.Width", n = 2)
#' @param pval_col Name of column in `df` containing p values.
#' @param sig Significance threshold. P values equal to or greater than this
#'   will be sampled.
#' @inheritParams dplyr::slice_sample
#'
#' @return A data frame.
#' @export
#'
#' @examples
#'
sample_nonsig_results <- function(df,
pval_col = "P",
sig = 5e-08,
n,
prop) {
# validate
if (!rlang::is_missing(n) & !rlang::is_missing(prop)) {
stop("Supply exactly only one of `n` and `prop` arguments")
}
# split into significant and non-significant dfs
df_split <- split(df,
df[[pval_col]] >= sig)
# sample non-significant results
if (!rlang::is_missing(prop)) {
df_split[["TRUE"]] <-
dplyr::slice_sample(df_split[["TRUE"]], prop = prop, replace = FALSE)
} else if (!rlang::is_missing(n)) {
df_split[["TRUE"]] <-
dplyr::slice_sample(df_split[["TRUE"]], n = n, replace = FALSE)
}
# return result
dplyr::bind_rows(df_split)
}
iris %>% sample_nonsig_results(pval_col = "Petal.Width", n = 2)
debug(sample_nonsig_results)
iris %>% sample_nonsig_results(pval_col = "Petal.Width", n = 2)
df_split
iris %>% sample_nonsig_results(pval_col = "Petal.Width", sig = 1.0, n = 2)
undebug(sample_nonsig_results)
iris %>% sample_nonsig_results(pval_col = "Petal.Width", sig = 1.0, n = 2)
iris
dummy_manhattan_df() %>% sample_nonsig_results(pval_col = "P", sig = 0.001, n = 2)
plot_manhattan_gwas <- function(df,
chr = "CHR",
log10_p = "P",
text = "SNP",
order_idx = "ORDER_IDX",
geom_point_args = list(alpha = 1,
size = 2),
labs_args = list(x = "Chromosome",
y = "-log10(p value)"),
col_manual = c("blue4", "orange3")) {
plot_manhattan_basic(df = df,
chr = chr,
log10_p = log10_p,
text = text,
order_idx = order_idx,
geom_point_args = geom_point_args,
labs_args = labs_args) +
ggplot2::scale_color_manual(values = rep(col_manual,
dplyr::n_distinct(df[[chr]])))
}
plot_manhattan_gwas(dummy_manhattan_df())
plot_manhattan_gwas()
dummy_manhattan_df() %>% rowid_to_column(var = "ORDER_IDX") %>% plot_manhattan_gwas()
plot_manhattan_gwas <- function(df,
chr = "CHR",
log10_p = "P",
text = "SNP",
order_idx = "ORDER_IDX",
geom_point_args = list(alpha = 1,
size = 2),
labs_args = list(x = "Chromosome",
y = "-log10(p value)"),
col_manual = c("blue4", "orange3")) {
# validate args
if (is.character(df[[chr]])) {
df[[chr]] <- as.integer(df[[chr]])
}
assertthat::assert_that(all(df[[chr]] %in% 1:22),
msg = "Values in `df[[chr]]` should be integers between 1 and 22")
plot_manhattan_basic(df = df,
chr = chr,
log10_p = log10_p,
text = text,
order_idx = order_idx,
geom_point_args = geom_point_args,
labs_args = labs_args) +
ggplot2::scale_color_manual(values = rep(col_manual,
dplyr::n_distinct(df[[chr]])))
}
dummy_manhattan_df() %>% rowid_to_column(var = "ORDER_IDX") %>% plot_manhattan_gwas()
debug(plot_manhattan_basic)
dummy_manhattan_df() %>% rowid_to_column(var = "ORDER_IDX") %>% plot_manhattan_gwas()
ggplot2::ggplot(df, ggplot2::aes(
x = .data[[order_idx]],
y = .data[[log10_p]]
)) +
# Show all points
ggplot2::geom_point(ggplot2::aes(colour = .data[[chr]]),
size = geom_point_args$size,
alpha = geom_point_args$alpha)
plot_manhattan_gwas <- function(df,
chr = "CHR",
log10_p = "P",
text = "SNP",
order_idx = "ORDER_IDX",
geom_point_args = list(alpha = 1,
size = 2),
labs_args = list(x = "Chromosome",
y = "-log10(p value)"),
col_manual = c("blue4", "orange3")) {
# validate args
if (is.character(df[[chr]])) {
df[[chr]] <- as.factor(as.integer(df[[chr]]))
}
assertthat::assert_that(all(df[[chr]] %in% 1:22),
msg = "Values in `df[[chr]]` should be integers between 1 and 22")
plot_manhattan_basic(df = df,
chr = chr,
log10_p = log10_p,
text = text,
order_idx = order_idx,
geom_point_args = geom_point_args,
labs_args = labs_args) +
ggplot2::scale_color_manual(values = rep(col_manual,
dplyr::n_distinct(df[[chr]])))
}
dummy_manhattan_df() %>% rowid_to_column(var = "ORDER_IDX") %>% plot_manhattan_gwas()
undebug(plot_manhattan_basic)
dummy_manhattan_df() %>% rowid_to_column(var = "ORDER_IDX") %>% plot_manhattan_gwas()
p <- dummy_manhattan_df() %>% rowid_to_column(var = "ORDER_IDX") %>% plot_manhattan_gwas()
plotly::ggplotly(p)
plotly::ggplotly(p, tooltip = "SNP")
plotly::ggplotly(p, tooltip = snp)
plotly::ggplotly(p, tooltip = "snp")
dummy_manhattan_df() %>% rowid_to_column(var = "ORDER_IDX")
plotly::ggplotly(p, tooltip = "CHR")
#' @param df A data frame.
#' @param chr Name of chromosome column. Should be type character or factor.
#' @param log10_p Name of -log10(p value) column. Should be on -log10 scale.
#' @param text Name of column with text annotation.
#' @param order_idx Name of column with order to arrange SNPs.
#'   Should be type integer.
#' @param geom_point_args A named list of arguments to be passed to
#'   [ggplot2::geom_point()].
#'
#' @return A ggplot plot object
plot_manhattan_basic <- function(df,
chr = "CHR",
log10_p = "P",
text = "SNP",
order_idx = "ORDER_IDX",
geom_point_args = list(alpha = 1,
size = 2),
labs_args = list(x = "Chromosome",
y = "-log10(p)")) {
# validate args
assertthat::assert_that(all(1:nrow(df) == sort(df[[order_idx]])),
msg = "Numbers in `order_idx` column should include all values between 1 and `nrow(df)`")
# prepare x axis for plotting
x_axis_df <- df %>%
dplyr::group_by(.data[[chr]]) %>%
dplyr::summarize("center" = (max(.data[[order_idx]]) + min(.data[[order_idx]])) / 2)
# plot
ggplot2::ggplot(df, ggplot2::aes(
x = .data[[order_idx]],
y = .data[[log10_p]],
text = .data[[text]]
)) +
# Show all points
ggplot2::geom_point(ggplot2::aes(colour = .data[[chr]]),
size = geom_point_args$size,
alpha = geom_point_args$alpha) +
# Label X axis. Labels positioned at centre of each chromosome
ggplot2::scale_x_continuous(label = x_axis_df[[chr]],
breaks = x_axis_df[["center"]]) +
# Theme: remove background, legend, grid and panel borders
ggplot2::theme_bw() +
ggplot2::theme(
legend.position = "none",
panel.border = ggplot2::element_blank(),
panel.grid.major = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank()
) +
# Reduce space between plot area and x axis
ggplot2::scale_y_continuous(expand = c(0, 0.5)) +
# axis labels
ggplot2::labs(x = labs_args$x,
y = labs_args$y)
}
plot_manhattan_gwas <- function(df,
chr = "CHR",
log10_p = "P",
text = "SNP",
order_idx = "ORDER_IDX",
geom_point_args = list(alpha = 1,
size = 2),
labs_args = list(x = "Chromosome",
y = "-log10(p value)"),
col_manual = c("blue4", "orange3")) {
# validate args
if (is.character(df[[chr]])) {
df[[chr]] <- as.factor(as.integer(df[[chr]]))
}
assertthat::assert_that(all(df[[chr]] %in% 1:22),
msg = "Values in `df[[chr]]` should be integers between 1 and 22")
plot_manhattan_basic(df = df,
chr = chr,
log10_p = log10_p,
text = text,
order_idx = order_idx,
geom_point_args = geom_point_args,
labs_args = labs_args) +
ggplot2::scale_color_manual(values = rep(col_manual,
dplyr::n_distinct(df[[chr]])))
}
p <- dummy_manhattan_df() %>% rowid_to_column(var = "ORDER_IDX") %>% plot_manhattan_gwas()
plotly::ggplotly(p, tooltip = "CHR")
plotly::ggplotly(p, tooltip = "SNP")
devtools::load_all(".")
library(tidyverse)
iris %>% filter(Speal.Length < 1) %>% show_query()
iris %>% filter(Sepal.Length < 1) %>% show_query()
?readr::read_csv
library(ukbwranglrextra)
library(ukbwranglrextra)
library(ukbwranglrextra)
get_caliber_categories_mapping()
library(ukbwranglrextra)
get_caliber_categories_mapping()
?get_caliber_categories_mapping()
system.file("extdata", "caliber_phenotype_categories_mapping.csv", package = "ukbwranglrextra")
system.file("extdata", package = "ukbwranglrextra")
list.files(system.file("extdata", package = "ukbwranglrextra"))
list.files(system.file("extdata", package = "ukbwranglrextra"), full.names = TRUE)
list.files(system.file("extdata", package = "ukbwranglrextra"), full.names = TRUE) %>% purrr::map(~ readr::read_csv(file = .x,
col_types = readr::cols(.default = readr::col_character())))
library(tidyverse)
list.files(system.file("extdata", package = "ukbwranglrextra"), full.names = TRUE) %>% purrr::map(~ readr::read_csv(file = .x,
col_types = readr::cols(.default = readr::col_character())))
library(tidyverse)
devtools::load_all(".")
devtools::install_local(/Users/alasdair/Documents/phd/r_packages/codemapper)
devtools::install_local("/Users/alasdair/Documents/phd/r_packages/codemapper")
?devtools::install_local()
usethis::use_test("clinical_events_to_phecodes")
ukbwranglr::clinical_events_sources()
ukbwranglr::dummy_main_dataset_clinical_events()
ukbwranglr::dummy_main_dataset_clinical_events() %>% ukbwranglr::tidy_clinical_events()
?ukbwranglr::tidy_clinical_events()
ukbwranglr::dummy_main_dataset_clinical_events()
ukbwranglr::clinical_events_sources()
ukbwranglr::clinical_events_sources() %>% as.data.frame()
ukbwranglr::clinical_events_sources() %>% reactable::reactable(filterable = TRUE, searchable = TRUE)
dummy_clinical_events <- tibble::tribble(
~eid,    ~source,    ~index,    ~code,    ~date,
# HTN
1,       "f41270",  "0_0",    "I10",      "2000-00-00",
2,       "gpc3_r3",  "0_0",    "XE0Uc",      "2000-00-00",
)
devtools::load_all(".")
dummy_clinical_events <- tibble::tribble(
~eid,    ~source,    ~index,    ~code,    ~date,
# HTN
1,       "f41270",  "0_0",    "I10",      "2000-00-00",
2,       "gpc3_r3",  "0_0",    "XE0Uc",      "2000-00-00",
)
clinical_events <- dummy_clinical_events
# ascertain available code types in `clinical_events`
clinical_events %>%
select(source) %>%
distinct() %>%
show_query()
ukbwranglr::clinical_events_sources()
?usethis::create_download_url()
usethis::create_download_url(https://github.com/spiros/chronological-map-phenotypes)
usethis::create_download_url("https://github.com/spiros/chronological-map-phenotypes")
caliber_repo_zip <- tempfile()
url <- usethis::create_download_url("https://github.com/spiros/chronological-map-phenotypes")
download.file(url,
destfile = caliber_repo_zip)
list.files(tempdir())
tempdir()
url <- paste0(base_url, "/zipball/master/")
base_url = "https://github.com/spiros/chronological-map-phenotypes"
url <- paste0(base_url, "/zipball/master/")
url
download.file(url,
destfile = caliber_repo_zip)
url <- paste0(base_url, "/archive/refs/heads/master.zip")
download.file(url,
destfile = caliber_repo_zip)
download.file("https://github.com/spiros/chronological-map-phenotypes/archive/refs/heads/master.zip",
destfile = caliber_repo_zip)
caliber_repo_unzipped = file.path(tempdir(), paste("chronological-map-phenotypes",
commit,
sep = "-"))
utils::unzip(caliber_repo_zip,
exdir = tempdir())
url <- paste0(base_url, "/zipball/master/")
# download zip file
download.file(url,
destfile = caliber_repo_zip)
# unzip
utils::unzip(caliber_repo_zip,
exdir = tempdir())
